/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define OUTPUT_SOURCE_KEYCODE_STATE_CHANGE 3

#define MAC_BASE_LAYER 0
#define LINUX_LAYER 1
#define SYMBOLS_2_LAYER 2
#define NAVIGATION_LAYER 3
#define CONNECTIVITY_LAYER 4
#define CODE_NAVIGATION_LAYER 5
#define SYMBOLS_LAYER 6

/ {
    behaviors {
        double_space_to_enter: double_space_to_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_SPACE_TO_ENTER";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp ENTER>;
        };

        f4_enter: f4_enter {
            compatible = "zmk,behavior-hold-tap";
            label = "F4_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        gresc_ctrl: gresc_ctrl {
            compatible = "zmk,behavior-mod-morph";
            label = "GRESC_CTRL";
            bindings = <&kp ESCAPE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_LALT)>;
        };

        dot_arrow: dot_arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "DOT_ARROW";
            bindings = <&arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        delayed_tap_hold_one: delayed_tap_hold_one {
            compatible = "zmk,behavior-hold-tap";
            label = "DELAYED_TAP_HOLD_ONE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <200>;
        };

        hold_on_tab_mt: hold_on_tab_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_ON_TAB_MT";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        only_hold: only_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "ONLY_HOLD";
            bindings = <&kp>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        only_tap_none_hold: only_tap_none_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "ONLY_TAP_NONE_HOLD";
            bindings = <&none>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        paste_on_hold_once: paste_on_hold_once {
            compatible = "zmk,behavior-hold-tap";
            label = "PASTE_ON_HOLD_ONCE";
            bindings = <&paste_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        monosnap_image_copy: monosnap_image_copy {
            compatible = "zmk,behavior-mod-morph";
            label = "MONOSNAP_IMAGE_COPY";
            bindings = <&kp C>, <&kp LA(LG(C))>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI)>;
        };

        copy_stuff: copy_stuff {
            compatible = "zmk,behavior-hold-tap";
            label = "COPY_STUFF";
            bindings = <&kp>, <&monosnap_image_copy>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        enter_shift_enter: enter_shift_enter {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER_SHIFT_ENTER";
            bindings = <&single_shift_enter>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        to_layer_on_hold: to_layer_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_LAYER_ON_HOLD";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <1000>;
        };

        copy_once_on_hold: copy_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "COPY_ONCE_ON_HOLD";
            bindings = <&copy_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        ctrl_esc: ctrl_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_ESC";
            bindings = <&shift_esc>, <&kp LC(GRAVE)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        shift_esc: shift_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_ESC";
            bindings = <&esc_tapdance>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        esc_tapdance: esc_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_TAPDANCE";
            #binding-cells = <0>;
            bindings =
                <&kp ESCAPE>,
                <&backtick_wrap>,
                <&triple_backtick>,
                <&triple_backtick_wrap_macro>;

            tapping-term-ms = <300>;
        };

        undo_once_on_hold: undo_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "UNDO_ONCE_ON_HOLD";
            bindings = <&undo_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        cut_once_on_hold: cut_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CUT_ONCE_ON_HOLD";
            bindings = <&cut_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        caps_lock_once_on_hold: caps_lock_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_LOCK_ONCE_ON_HOLD";
            bindings = <&caps_lock_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        paste_link_on_hold_once: paste_link_on_hold_once {
            compatible = "zmk,behavior-hold-tap";
            label = "PASTE_LINK_ON_HOLD_ONCE";
            bindings = <&paste_link_macro>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        insert_bookmark_on_hold_once: insert_bookmark_on_hold_once {
            compatible = "zmk,behavior-hold-tap";
            label = "INSERT_BOOKMARK_ON_HOLD_ONCE";
            bindings = <&insert_bookmark_macro>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        delayed_tap_once_on_hold: delayed_tap_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&key_once_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <200>;
        };

        delayed_tap_once_haptic_on_hold: delayed_tap_once_haptic_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&key_once_haptic_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <200>;
        };

        lra0_bump: lra0_bump {
            compatible = "zmk,output-behavior-generic"; 
            #binding-cells = <0>;
            device = <&lra0>;
            /* force will be convrt to waveformm effect from DRV2605 library */
            /* NOTE: <7> is Soft Bump at 100% */
            force = <6>;
        };

        lra0_bump_listener: lra0_bump_listener {
            compatible = "zmk,output-behavior-listener";
            layers = < 0 1 >;
            sources = < OUTPUT_SOURCE_KEYCODE_STATE_CHANGE >;
            #binding-cells = <0>;
            /* set keycode filter here */
            position = < 0x73 >;
            bindings = < &lra0_bump >;
            
            /* enable to catch all state change that include key press and release */
            /* ensure to stop on-going LRA effect immediately on key released */
            all-state;
        };

        mouse_move_up: mouse_move_up {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mouse_move_up_slow>, <&mmv MOVE_Y(-3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mouse_move_right: mouse_move_right {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mouse_move_right_slow>, <&mmv MOVE_X(3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mouse_move_down: mouse_move_down {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mouse_move_down_slow>, <&mmv MOVE_Y(3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mouse_move_left: mouse_move_left {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mouse_move_left_slow>, <&mmv MOVE_X(-3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mouse_move_up_slow: mouse_move_up_slow {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_Y(-400)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mouse_move_right_slow: mouse_move_right_slow {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_RIGHT>, <&mmv MOVE_X(400)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mouse_move_down_slow: mouse_move_down_slow {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_DOWN>, <&mmv MOVE_Y(400)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mouse_move_left_slow: mouse_move_left_slow {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_X(-400)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    macros {
        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT &kp LC(SPACE)>;
            label = "ARROW";
        };

        paste_once: paste_plain {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp F24>;
            label = "PASTE_PLAIN";
        };

        single_shift_enter: single_shift_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(ENTER)>;
            label = "SINGLE_SHIFT_ENTER";
        };

        copy_once: copy_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp F24>;
            label = "COPY_ONCE";
        };

        triple_backtick: triple_backtick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "triple_backtick";
        };

        backtick_wrap: backtick_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp GRAVE &kp GRAVE &kp LEFT_ARROW &kp LG(V)>;
            label = "BACKTICK_WRAP";
        };

        undo_once: undo_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>, <&kp F24>;
            label = "UNDO_ONCE";
        };

        cut_once: cut_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X)>, <&kp F24>;
            label = "CUT_ONCE";
        };

        caps_lock_once: caps_lock_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPSLOCK>, <&kp F24>;
            label = "CAPS_LOCK_ONCE";
        };

        paste_link_macro: paste_link_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(K)>,
                <&macro_wait_time 200>,
                <&kp LG(V) &kp ENTER>;

            label = "PASTE_LINK_MACRO";
        };

        insert_bookmark_macro: insert_bookmark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(I))>, <&macro_wait_time 200>, <&kp B>, <&kp F24>;

            label = "INSERT_BOOKMARK";
        };

        triple_backtick_wrap_macro: triple_backtick_wrap_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp GRAVE &kp GRAVE &kp GRAVE &kp LS(ENTER) &kp LG(V) &kp LS(ENTER) &kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_BACKTICK_WRAP_MACRO";
        };

        docs_reset_format_macro: docs_reset_format_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "DOCS_RESET_FORMAT_MACRO";
        };

        docs_wrap_text_macro: docs_wrap_text_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(O)) &kp W &kp W>;
            label = "DOCS_WRAP_TEXT_MACRO";
        };

        key_once_macro: key_once_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>;
        };

        key_once_haptic_macro: key_once_haptic_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>, <&kp F24>;
        };
    };

    combos {
        compatible = "zmk,combos";

        shift_tab_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <>;
            layers = <0>;
        };

        mo_docs_layer {
            bindings = <&mo 6>;
            key-positions = <54 53>;
            timeout-ms = <100>;
        };

        code_edit {
            bindings = <&mo 7>;
            key-positions = <56 55>;
            timeout-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac {
            display-name = "mac";
            bindings = <
&ctrl_esc                      &delayed_tap_once_on_hold F1 N1    &delayed_tap_once_on_hold F2 N2        &delayed_tap_once_on_hold F3 N3        &delayed_tap_once_on_hold F4 N4        &delayed_tap_once_on_hold F5 N5                                    &delayed_tap_once_on_hold F6 N6        &delayed_tap_once_on_hold F7 N7        &delayed_tap_once_on_hold F8 N8  &delayed_tap_once_on_hold F9 N9        &delayed_tap_once_on_hold F10 N0  &kp BACKSPACE
&caps_lock_once_on_hold 0 TAB  &delayed_tap_hold_one LG(LC(Q)) Q  &delayed_tap_hold_one LS(LA(W)) W  &delayed_tap_hold_one LA(LS(E)) E  &delayed_tap_hold_one LA(LS(R)) R  &delayed_tap_hold_one LG(LC(T)) T                              &delayed_tap_hold_one LA(Y) Y      &kp U                              &kp I                        &delayed_tap_hold_one LA(LS(O)) O  &delayed_tap_once_on_hold F11 P   &delayed_tap_once_on_hold F12 BACKSLASH
&kp LEFT_SHIFT                 &delayed_tap_hold_one LA(LS(A)) A  &delayed_tap_hold_one LS(LA(S)) S  &delayed_tap_hold_one LA(LS(D)) D  &delayed_tap_once_haptic_on_hold LG(F) F      &delayed_tap_hold_one LS(LA(G)) G                              &delayed_tap_hold_one LC(LG(H)) H  &kp J                              &kp K                        &kp L                              &kp SEMI                      &kp SQT
&kp LCTRL                      &undo_once_on_hold 0 Z             &cut_once_on_hold 0 X              &copy_once_on_hold 0 C             &paste_on_hold_once 0 V            &delayed_tap_hold_one LA(LS(B)) B  &none          &kp LC(LA(LG(F13)))        &kp N                              &delayed_tap_hold_one LS(LA(M)) M  &kp COMMA                    &dot_arrow 0 DOT                   &kp FSLH                      &enter_shift_enter 0 ENTER
                                                                  &kp LCTRL                          &kp LALT                           &kp LEFT_GUI                       &lt 2 SPACE                        &lt 6 SPACE    &lt 5 SPACE  &lt 3 SPACE                        &mo 9                              &only_hold LA(Y) 0           &mo 4
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
        };

        linux {
            display-name = "linux";
            bindings = <
&trans  &trans  &trans  &trans    &trans    &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans    &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &delayed_tap_once_haptic_on_hold LC(F) F    &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &delayed_tap_once_haptic_on_hold LC(Z) Z  &delayed_tap_once_haptic_on_hold LC(X) X  &delayed_tap_once_haptic_on_hold LC(C) C    &delayed_tap_once_haptic_on_hold LC(V) V    &trans  &none     &none   &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &kp LGUI  &kp LALT  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
        };

        symbols_2 {
            display-name = "symbols_2";
            bindings = <
&trans  &kp LS(EXCL)   &kp LS(LPAR)      &kp LS(RPAR)       &kp SEMI      &kp BSLH                         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(LBRC)   &kp SQT           &kp LS(DQT)        &kp LS(RBRC)  &kp LS(QMARK)                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(CARET)  &kp EQUAL         &kp LS(UNDER)      &kp LS(DLLR)  &kp LS(AMPS)                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LT         &kp LS(PIPE)      &kp MINUS          &kp GT        &kp SLASH      &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PLUS      &trans         &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        navigation {
            display-name = "navigation";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &kp PG_UP     &trans        &kp LA(UP)    &trans         &trans   &kp LA(BACKSPACE)
&trans  &trans  &trans  &trans  &trans  &trans                    &kp PG_DN  &kp LA(LEFT)  &kp UP        &kp LA(RIGHT)  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp HOME   &kp LEFT      &kp DOWN      &kp RIGHT      &kp END  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans        &kp LA(DOWN)  &trans         &trans   &kp LS(ENTER)
                &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        connectivity {
            display-name = "connectivity";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                               &out OUT_TOG  &sys_reset  &bootloader  &none  &none  &none
&ext_power EP_TOG  &bt BT_CLR_ALL   &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none         &none       &none        &none  &none  &none
&none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none         &none       &none        &to 1  &none  &none
&none              &none            &none            &none            &none            &none            &rgb_ug RGB_TOG    &none  &none         &to 0       &none        &none  &none  &kp N3
                                    &none            &none            &none            &none            &none              &none  &none         &none       &none        &none
            >;
        };

        code_nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans               &trans  &trans                                         &trans  &trans
&trans  &trans  &trans  &kp LC(LA(LS(F13)))  &kp LC(LA(LS(F14)))  &kp LC(LA(LS(F15)))                    &trans  &mt LA(LS(U)) LA(U)  &trans  &kp LG(LC(O))                                  &trans  &trans
&trans  &trans  &trans  &kp LC(LA(LS(F16)))  &kp LC(LA(LS(F17)))  &kp LC(LA(LS(F18)))                    &trans  &kp LC(LG(LEFT))     &trans  &delayed_tap_hold_one LC(LG(L)) LC(LG(RIGHT))  &trans  &trans
&trans  &trans  &trans  &kp LC(LA(LS(F19)))  &kp LC(LA(LS(F20)))  &kp LC(LA(LS(F21)))  &trans    &trans  &trans  &trans               &trans  &trans                                         &trans  &kp LC(ENTER)
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans               &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(Z) LG(LS(Z))>;
        };

        docs {
            bindings = <
&trans  &kp LG(LA(N1))  &kp LG(LA(N2))                 &kp LG(LA(N3))         &kp LG(LA(N4))             &trans                                    &trans  &trans  &trans  &trans  &kp LG(LA(N0))  &trans
&trans  &trans  &docs_wrap_text_macro  &kp LG(LC(SPACE))         &kp LG(BACKSLASH)  &trans                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans                 &trans         &trans             &trans                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans                 &kp LG(LA(M))  &paste_link_macro  &insert_bookmark_macro  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &kp LG(ENTER)
                &trans                 &trans         &trans             &trans                  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(Z) LG(LS(Z))>;
        };

        code_edit {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        fn_and_numbers {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4   &kp F5                     &trans  &trans  &kp FSLH   &kp ASTERISK  &kp BSPC   &trans
&trans  &kp F6  &kp F7  &kp F8  &kp F9   &kp F10                    &trans  &kp N7  &kp N8     &kp N9        &kp PLUS   &trans
&trans  &trans  &trans  &trans  &kp F11  &kp F12                    &trans  &kp N4  &kp N5     &kp N6        &kp MINUS  &trans
&trans  &trans  &trans  &trans  &trans   &trans   &trans    &trans  &trans  &kp N3  &kp N2     &kp N1        &trans     &trans
                &trans  &trans  &trans   &trans   &trans    &trans  &trans  &kp N0  &kp COMMA  &kp DOT
            >;
        };

        pointer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans                    &kp PAGE_UP     &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans           &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans                    &msc SCRL_UP    &mkp LCLK       &mouse_move_up     &trans           &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans                    &msc SCRL_DOWN  &mouse_move_left  &mouse_move_down   &mouse_move_right  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans  &trans    &trans  &kp PAGE_DOWN   &trans          &trans           &trans           &trans  &trans
                &trans     &trans     &trans     &trans  &trans    &trans  &trans          &trans          &trans           &trans
            >;
        };

        zoom {
            bindings = <
&none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                  &none  &kp LG(LA(N5))  &none  &none  &kp LG(LA(N9))  &none
&none  &none  &none  &none  &none  &none                  &kp LA(Y)  &none  &none  &kp LG(LA(N6))  &none  &none
&none  &none  &none  &none  &kp LS(LG(V))  &none  &trans    &trans  &none  &kp LS(LG(A))  &none  &none  &none  &none
              &none  &none  &none  &trans  &trans    &trans  &trans  &kp SPACE  &none  &none
            >;
        };

        layers {
            bindings = <
&to 0  &to 1  &to 2  &to 3  &to 4  &to 5                  &to 6  &to 7  &to 8  &to 9  &none  &none
&none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &to 8  &none                  &none  &none  &none  &none  &none  &none
&none  &to 10  &none  &none  &none  &none  &trans    &trans  &to 8  &none  &none  &none  &none  &none
              &none  &none  &none  &trans  &trans    &trans  &trans  &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        to_layers_layer {
            if-layers = <6 5>;
            then-layer = <11>;
        };
    };
};
