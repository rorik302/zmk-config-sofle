/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define OUTPUT_SOURCE_KEYCODE_STATE_CHANGE 3
#define MAC_BASE_LAYER 0
#define LINUX_LAYER 1
#define SYMBOLS_2_LAYER 2
#define NAVIGATION_LAYER 3
#define CONNECTIVITY_LAYER 4
#define CODE_NAVIGATION_LAYER 5
#define SYMBOLS_LAYER 6

&left_encoder { status = "disabled"; };

&right_encoder {
    status = "ok";
    steps = <120>;
};

&sensors { triggers-per-rotation = <30>; };

/ {
    behaviors {
        double_space_to_enter: double_space_to_enter {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp ENTER>;
        };

        f4_enter: f4_enter {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        gresc_ctrl: gresc_ctrl {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp ESCAPE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_LALT)>;
        };

        dot_arrow: dot_arrow {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        delayed_tap_hold_one: delayed_tap_hold_one {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <200>;
        };

        hold_on_tab_mt: hold_on_tab_mt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        only_hold: only_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        only_tap_none_hold: only_tap_none_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&none>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        paste_on_hold_once: paste_on_hold_once {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&paste_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
        };

        monosnap_image_copy: monosnap_image_copy {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp C>, <&kp LA(LG(C))>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI)>;
        };

        copy_stuff: copy_stuff {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&monosnap_image_copy>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        enter_shift_enter: enter_shift_enter {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&single_shift_enter>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        to_layer_on_hold: to_layer_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <1000>;
        };

        copy_once_on_hold: copy_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&copy_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
        };

        ctrl_esc: ctrl_esc {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&shift_esc>, <&kp LC(GRAVE)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        shift_esc: shift_esc {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&esc_tapdance>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        esc_tapdance: esc_tapdance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings =
                <&kp ESCAPE>,
                <&backtick_wrap>,
                <&triple_backtick>,
                <&triple_backtick_wrap_macro>;

            tapping-term-ms = <300>;
        };

        undo_once_on_hold: undo_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&undo_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
        };

        cut_once_on_hold: cut_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&cut_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
        };

        caps_lock_once_on_hold: caps_lock_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&caps_lock_once>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        paste_link_on_hold_once: paste_link_on_hold_once {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&paste_link_macro>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        insert_bookmark_on_hold_once: insert_bookmark_on_hold_once {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&insert_bookmark_macro>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        delayed_tap_once_on_hold: delayed_tap_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&key_once_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        delayed_tap_once_haptic_on_hold: delayed_tap_once_haptic_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&key_once_haptic_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        lra0_bump: lra0_bump {
            compatible = "zmk,output-behavior-generic";
            #binding-cells = <0>;
            device = <&lra0>;

            /* force will be convrt to waveformm effect from DRV2605 library */
            /* NOTE: <7> is Soft Bump at 100% */

            force = <25>;
        };

        lra0_bump_listener: lra0_bump_listener {
            compatible = "zmk,output-behavior-listener";
            layers = < 0 1 2 >;
            sources = < OUTPUT_SOURCE_KEYCODE_STATE_CHANGE >;
            #binding-cells = <0>;

            /* set keycode filter here */

            position = < 0x73 >;
            bindings = < &lra0_bump >;

            /* enable to catch all state change that include key press and release */
            /* ensure to stop on-going LRA effect immediately on key released */

            all-state;
        };

        mouse_move_up: mouse_move_up {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_Y(-3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mouse_move_right: mouse_move_right {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_RIGHT>, <&mmv MOVE_X(3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mouse_move_down: mouse_move_down {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_DOWN>, <&mmv MOVE_Y(3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mouse_move_left: mouse_move_left {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_X(-3000)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        parenthesis_pair_on_hold: parenthesis_pair_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&parenthesis_pair_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        brackets_pair_on_hold: brackets_pair_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&brackets_pair_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        angle_pair_on_hold: angle_pair_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&angle_pair_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        curly_pair_on_hold: curly_pair_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&curly_pair_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        double_quote_pair_on_hold: double_quote_pair_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&double_quote_pair_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        control_tapdance_to_suggestion: control_tapdance_to_suggestion {
            compatible = "zmk,behavior-tap-dance";
            label = "CONTROL_TAPDANCE_TO_SUGGESTION";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp LC(SPACE)>;

            tapping-term-ms = <250>;
        };

        long_delayed_tap_once_on_hold: long_delayed_tap_once_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&key_once_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
            label = "LONG_DELAYED_TAP_ONCE_ON_HOLD";
        };

        fat_arrow_on_hold: fat_arrow_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&fat_arrow_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            label = "FAT_ARROW_ON_HOLD";
        };

        pipe_arrow_on_hold: pipe_arrow_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&pipe_arrow_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            label = "PIPE_ARROW_ON_HOLD";
        };

        string_with_var_on_hold: string_with_var_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&string_with_var_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            label = "STRING_WITH_VAR_ON_HOLD";
        };

        single_quote_pair_on_hold: single_quote_pair_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&single_quote_pair_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            label = "SINGLE_QUOTE_PAIR_ON_HOLD";
        };
    };

    macros {
        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT &kp LC(SPACE)>;
        };

        paste_once: paste_plain {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V) &kp F24>;
        };

        single_shift_enter: single_shift_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(ENTER)>;
        };

        copy_once: copy_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C) &kp F24>;
        };

        triple_backtick: triple_backtick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
        };

        backtick_wrap: backtick_wrap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp GRAVE &kp GRAVE &kp LEFT_ARROW &kp LG(V)>;
        };

        undo_once: undo_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z) &kp F24>;
        };

        cut_once: cut_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp F24>;
        };

        caps_lock_once: caps_lock_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPSLOCK &kp F24>;
        };

        paste_link_macro: paste_link_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(K)>,
                <&macro_wait_time 200>,
                <&kp LG(V) &kp ENTER>;
        };

        insert_bookmark_macro: insert_bookmark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(I))>, <&macro_wait_time 200>, <&kp B &kp F24>;
        };

        triple_backtick_wrap_macro: triple_backtick_wrap_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp GRAVE &kp GRAVE &kp GRAVE &kp LS(ENTER) &kp LG(V) &kp LS(ENTER) &kp GRAVE &kp GRAVE &kp GRAVE>;
        };

        docs_reset_format_macro: docs_reset_format_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
        };

        docs_wrap_text_macro: docs_wrap_text_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(O)) &kp W &kp W>;
        };

        key_once_macro: key_once_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };

        key_once_haptic_macro: key_once_haptic_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp F24>;
        };

        parenthesis_pair_macro: parenthesis_pair_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT &kp F24>;
        };

        brackets_pair_macro: brackets_pair_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT &kp F24>;
        };

        angle_pair_macro: angle_pair_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT &kp F24>;
        };

        curly_pair_macro: curly_pair_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LBRC) &kp RBRC &kp LEFT &kp F24>;
        };

        double_quote_pair_macro: double_quote_pair_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT &kp F24>;
        };

        fat_arrow_macro: fat_arrow_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_EQUAL &kp GREATER_THAN &kp F24>;
            label = "FAT_ARROW_MACRO";
        };

        pipe_arrow_macro: pipe_arrow_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp GREATER_THAN &kp F24>;
            label = "PIPE_ARROW_MACRO";
        };

        string_with_var_macro: string_with_var_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR &kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT &kp F24>;
            label = "STRING_WITH_VAR_MACRO";
        };

        single_quote_pair_macro: single_quote_pair_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT &kp F24>;
            label = "SINGLE_QUOTE_PAIR_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        shift_tab_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <>;
            layers = <0>;
        };

        mo_docs_layer {
            bindings = <&mo 6>;
            key-positions = <54 53>;
            timeout-ms = <100>;
        };

        code_edit {
            bindings = <&mo 7>;
            key-positions = <56 55>;
            timeout-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac {
            display-name = "mac";
            bindings = <
&ctrl_esc                        &delayed_tap_once_on_hold F1 N1           &delayed_tap_once_on_hold F2 N2           &delayed_tap_once_on_hold F3 N3    &delayed_tap_once_on_hold F4 N4           &delayed_tap_once_on_hold F5 N5                                          &delayed_tap_once_on_hold F6 N6               &delayed_tap_once_on_hold F7 N7    &delayed_tap_once_on_hold F8 N8                      &delayed_tap_once_on_hold F9 N9             &delayed_tap_once_on_hold F10 N0  &kp BACKSPACE
&caps_lock_once_on_hold 0 TAB    &delayed_tap_hold_one LG(LC(Q)) Q         &delayed_tap_hold_one LS(LA(W)) W         &delayed_tap_hold_one LA(LS(E)) E  &delayed_tap_hold_one LA(LS(R)) R         &delayed_tap_hold_one LG(LC(T)) T                                        &delayed_tap_hold_one LA(Y) Y                 &kp U                              &kp I                                                &delayed_tap_hold_one LA(LS(O)) O           &delayed_tap_once_on_hold F11 P   &delayed_tap_once_on_hold F12 LEFT_BRACKET
&kp LEFT_SHIFT                   &delayed_tap_once_haptic_on_hold LG(A) A  &delayed_tap_once_haptic_on_hold LG(S) S  &delayed_tap_hold_one LA(LS(D)) D  &delayed_tap_once_haptic_on_hold LG(F) F  &delayed_tap_hold_one LS(LA(G)) G                                        &delayed_tap_once_haptic_on_hold LC(LG(H)) H  &kp J                              &kp K                                                &long_delayed_tap_once_on_hold LS(LA(S)) L  &kp SEMI                          &kp SQT
&control_tapdance_to_suggestion  &undo_once_on_hold 0 Z                    &cut_once_on_hold 0 X                     &copy_once_on_hold 0 C             &paste_on_hold_once 0 V                   &delayed_tap_hold_one LA(LS(B)) B  &kp LC(LG(H))    &kp LC(LA(LG(F13)))  &kp N                                         &delayed_tap_hold_one LS(LA(M)) M  &kp COMMA                                            &dot_arrow 0 DOT                            &kp FSLH                          &kp ENTER
                                                                           &mo 8                                     &kp LALT                           &kp LEFT_GUI                              &lt 2 SPACE                        &lt 6 SPACE      &lt 5 SPACE          &lt 3 SPACE                                   &mo 9                              &delayed_tap_once_on_hold LA(ESCAPE) K_CONTEXT_MENU  &mo 4
            >;

            sensor-bindings = <&inc_dec_kp A B>, <&inc_dec_kp DOWN UP>;
        };

        linux {
            display-name = "linux";
            bindings = <
&trans  &trans                                    &trans                                    &trans                                    &trans                                    &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                                    &trans                                    &trans                                    &trans                                    &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                                    &trans                                    &trans                                    &delayed_tap_once_haptic_on_hold LC(F) F  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &delayed_tap_once_haptic_on_hold LC(Z) Z  &delayed_tap_once_haptic_on_hold LC(X) X  &delayed_tap_once_haptic_on_hold LC(C) C  &delayed_tap_once_haptic_on_hold LC(V) V  &trans  &none     &none   &trans  &trans  &trans  &trans  &trans  &trans
                                                  &trans                                    &kp LGUI                                  &kp LALT                                  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp A Z>, <&inc_dec_kp DOWN UP>;
        };

        symbols_2 {
            display-name = "symbols_2";
            bindings = <
&kp GRAVE  &brackets_pair_on_hold 0 LEFT_BRACKET  &parenthesis_pair_on_hold 0 LPAR       &kp RPAR                          &kp RIGHT_BRACKET                  &kp BSLH                     &trans  &trans  &trans  &trans  &trans  &trans
&trans     &curly_pair_on_hold 0 LBRC             &single_quote_pair_on_hold 0 SQT       &double_quote_pair_on_hold 0 DQT  &kp RBRC                           &kp PLUS                     &trans  &trans  &trans  &trans  &trans  &trans
&trans     &kp CARET                              &fat_arrow_on_hold 0 EQUAL             &kp LS(UNDER)                     &string_with_var_on_hold 0 DOLLAR  &kp AMPS                     &trans  &trans  &trans  &trans  &trans  &trans
&trans     &angle_pair_on_hold 0 LT               &pipe_arrow_on_hold 0 PIPE             &dot_arrow 0 MINUS                &kp GT                             &kp SLASH  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                                  &brackets_pair_on_hold 0 LEFT_BRACKET  &kp RIGHT_BRACKET                 &kp PLUS                           &trans     &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        navigation {
            display-name = "navigation";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &kp PG_UP  &trans        &kp LA(UP)             &trans         &trans   &kp LA(BACKSPACE)
&trans  &trans  &trans  &trans  &trans  &trans                    &kp PG_DN  &kp LA(LEFT)  &kp UP                 &kp LA(RIGHT)  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp HOME   &kp LEFT      &kp DOWN               &kp RIGHT      &kp END  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans        &kp LS(LG(LC(RIGHT)))  &trans         &trans   &kp LS(ENTER)
                &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans        &trans                 &trans
            >;

            sensor-bindings = <&inc_dec_kp A Z>, <&inc_dec_kp RIGHT LEFT>;
        };

        connectivity {
            display-name = "connectivity";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                               &out OUT_TOG  &sys_reset  &bootloader  &none  &none  &none
&ext_power EP_TOG  &bt BT_CLR_ALL   &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none         &none       &none        &none  &none  &none
&none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none         &none       &none        &to 1  &none  &none
&none              &none            &none            &none            &none            &none            &rgb_ug RGB_TOG    &none  &none         &to 0       &none        &none  &none  &kp N3
                                    &none            &none            &none            &none            &none              &none  &none         &none       &none        &none
            >;
        };

        code_nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans               &trans  &trans                                         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &mt LA(LS(U)) LA(U)  &trans  &kp LG(LC(O))                                  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp LC(LG(LEFT))     &trans  &delayed_tap_hold_one LC(LG(L)) LC(LG(RIGHT))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans               &trans  &trans                                         &trans  &kp LC(ENTER)
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans               &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp A Z>,
                <&inc_dec_kp LC(LG(RIGHT)) LC(LG(LEFT))>;
        };

        app_actions {
            bindings = <
&trans  &kp LA(F13)          &kp LA(F14)          &kp LA(F15)          &kp LA(F16)          &kp LA(F17)                            &trans  &trans  &trans  &trans  &kp LG(LA(N0))  &trans
&trans  &kp LC(F13)          &kp LC(F14)          &kp LC(F15)          &kp LC(F16)          &kp LC(F17)                            &trans  &trans  &trans  &trans  &trans          &trans
&trans  &kp LA(LC(F13))      &kp LA(LC(F14))      &kp LA(LC(F15))      &kp LA(LC(F16))      &kp LA(LC(F17))                        &trans  &trans  &trans  &trans  &trans          &trans
&trans  &kp LA(LC(LS(F13)))  &kp LA(LS(LC(F14)))  &kp LA(LC(LS(F15)))  &kp LA(LC(LS(F16)))  &kp LA(LC(LS(F17)))  &trans    &trans  &trans  &trans  &trans  &trans  &trans          &kp LG(ENTER)
                             &trans               &trans               &trans               &trans               &trans    &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp A Z>, <&inc_dec_kp LG(LS(Z)) LG(Z)>;
        };

        code_edit {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        fn_and_numbers {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                     &trans  &trans        &kp FSLH      &kp ASTERISK  &kp BSPC   &trans
&trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10                    &trans  &kp N7        &kp N8        &kp N9        &kp PLUS   &trans
&trans  &trans   &trans   &trans   &kp F11  &kp F12                    &trans  &kp N4        &kp N5        &kp N6        &kp MINUS  &trans
&trans  &kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &trans    &trans  &trans  &kp NUMBER_1  &kp N2        &kp NUMBER_3  &kp COMMA  &trans
                 &trans   &trans   &trans   &trans   &trans    &trans  &trans  &kp N0        &kp NUMBER_0  &kp DOT
            >;
        };

        pointer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans                    &kp PAGE_UP     &msc SCRL_LEFT    &msc SCRL_RIGHT   &trans             &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans                    &msc SCRL_UP    &mkp LCLK         &mouse_move_up    &mkp RCLK          &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans                    &msc SCRL_DOWN  &mouse_move_left  &mouse_move_down  &mouse_move_right  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans  &trans    &trans  &kp PAGE_DOWN   &trans            &trans            &trans             &trans  &trans
                &trans     &trans     &trans     &trans  &trans    &trans  &trans          &trans            &trans            &trans
            >;
        };

        zoom {
            bindings = <
&none  &none  &none  &none  &none          &none                     &none      &none           &none  &none           &none           &none
&none  &none  &none  &none  &none          &none                     &none      &kp LG(LA(N5))  &none  &none           &kp LG(LA(N9))  &none
&none  &none  &none  &none  &none          &none                     &kp LA(Y)  &none           &none  &kp LG(LA(N6))  &none           &none
&none  &none  &none  &none  &kp LS(LG(V))  &none   &trans    &trans  &none      &kp LS(LG(A))   &none  &none           &none           &none
              &none  &none  &none          &trans  &trans    &trans  &trans     &kp SPACE       &none  &none
            >;
        };

        layers {
            bindings = <
&to 0  &to 1   &to 2  &to 3  &to 4  &to 5                     &to 6   &to 7  &to 8  &to 9  &none  &none
&none  &none   &none  &none  &none  &none                     &none   &none  &none  &none  &none  &none
&none  &none   &none  &none  &to 8  &none                     &none   &none  &none  &to 1  &none  &none
&none  &to 10  &none  &none  &none  &none   &trans    &trans  &to 8   &to 0  &none  &none  &none  &none
               &none  &none  &none  &trans  &trans    &trans  &trans  &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        to_layers_layer {
            if-layers = <6 5>;
            then-layer = <11>;
        };
    };
};
